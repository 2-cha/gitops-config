defaults REDIS
  mode tcp
  timeout connect 5s
  timeout client 30s
  timeout server 30s

resolvers k8s
  # use the host's DNS resolver (/etc/resolv.conf)
  parse-resolv-conf

  hold obsolete 5s
  hold other    5s
  hold refused  5s
  hold nx       5s
  hold timeout  5s
  hold valid    5s



frontend ft_redis_read
  bind *:6379
  default_backend bk_redis_read


frontend ft_redis_write
  bind *:6380
  default_backend bk_redis_write


backend bk_redis_write
  mode tcp
  balance first
  option tcp-check
  tcp-check send info\ replication\r\n
  tcp-check expect string role:master
  server node0 redis-node-0.redis-headless.redis-ha.svc.cluster.local:6379 check inter 1s resolvers k8s
  server node1 redis-node-1.redis-headless.redis-ha.svc.cluster.local:6379 check inter 1s resolvers k8s
  server node2 redis-node-2.redis-headless.redis-ha.svc.cluster.local:6379 check inter 1s resolvers k8s

backend bk_redis_read
  mode tcp
  balance roundrobin
  option tcp-check
  tcp-check send PING\r\n
  tcp-check expect string +PONG

  server node0 redis-node-0.redis-headless.redis-ha.svc.cluster.local:6379 check inter 1s resolvers k8s
  server node1 redis-node-1.redis-headless.redis-ha.svc.cluster.local:6379 check inter 1s resolvers k8s
  server node2 redis-node-2.redis-headless.redis-ha.svc.cluster.local:6379 check inter 1s resolvers k8s


# Dashboard
frontend http
  bind :8080
  default_backend stats


backend stats
  mode http
  stats enable

  stats enable
  stats uri /haproxy
  stats refresh 1s
  stats show-legends
  stats admin if TRUE
