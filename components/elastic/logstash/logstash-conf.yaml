apiVersion: v1
kind: ConfigMap
metadata:
  namespace: elastic
  name: logstash-conf
data:
  logstash.conf: |+
    input {
      tcp {
        port => 5000
        codec => json_lines
      }
    }
    filter {
      if [message] =~ /\[GET\]\[\/places\/nearby\]/ {
        clone {
          clones => [ "placesQuery" ]
        }
      }
      if [type] == "placesQuery" {
        grok {
          match => { "message" => "\[GET\]\[\/places\/nearby\] lat=\"\[%{NUMBER:lat}\]\" lon=\"\[%{NUMBER:lon}\]\"" }
        }
        mutate {
          #convert => { "lat" => "float" }
          #convert => { "lon" => "float" }
          #copy => {
          #  "lat" => "[location][lat]"
          #  "lon" => "[location][lon]"
          #}
          add_field => { "location" => "%{lat},%{lon}" }
          remove_field => [ "lat", "lon" ]
        }
      }
      if [logger_name] == "ReviewTagsLogger" {
        mutate {
          remove_field => [ "host", "level", "level_value", "message", "port", "thread_name" ] 
        }
      }
    }
    output {
      if [type] == "placesQuery" {
        elasticsearch {
          hosts => ["elasticsearch-0.elasticsearch.elastic.svc.cluster.local:9200"]
          index => "places-query-location-%{+YYYY.MM.dd}"
          manage_template => true
          template_name => "places-query-location"
          template => "/usr/share/logstash/index-templates/places-query-location.json"
        }
      }
      else if [logger_name] == "ReviewTagsLogger" {
        elasticsearch {
          hosts => ["elasticsearch-0.elasticsearch.elastic.svc.cluster.local:9200"]
          index => "review-tags-%{+YYYY.MM.dd}"
        }
      }
      else {
        elasticsearch {
          hosts => ["elasticsearch-0.elasticsearch.elastic.svc.cluster.local:9200"]
          index => "myindex-%{+YYYY.MM.dd}"
        }
      }
    }

